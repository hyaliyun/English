"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[23918],{98762:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"sounds-of-american-english/8.3-phoneme-exercises","title":"8.3. \u97f3\u6807\u7ec3\u4e60","description":"\u8fd9\u662f\u4e00\u4e2a Jupyter Notebook\uff0c\u7528\u6765\u5efa\u7acb\u97f3\u6807\u7b26\u53f7\u4e0e\u58f0\u97f3\u4e4b\u95f4\u7684\u5173\u8054\u3002","source":"@site/learn/sounds-of-american-english/8.3-phoneme-exercises.md","sourceDirName":"sounds-of-american-english","slug":"/sounds-of-american-english/8.3-phoneme-exercises","permalink":"/learn/sounds-of-american-english/8.3-phoneme-exercises","draft":false,"unlisted":false,"editUrl":"https://github.com/hyaliyun/English/edit/main/website/learn/sounds-of-american-english/8.3-phoneme-exercises.md","tags":[],"version":"current","frontMatter":{},"sidebar":"devDocsSidebar","previous":{"title":"8.2. \u83b7\u53d6 CEPD \u97f3\u6807","permalink":"/learn/sounds-of-american-english/8.2-cepd-phonetics-and-sound"},"next":{"title":"8.4. \u6bcf\u65e5\u7ec3\u4e60\u8bed\u97f3\u751f\u6210","permalink":"/learn/sounds-of-american-english/8.4-daily-speech-exercises"}}');var s=r(74848),t=r(28453);const i={},a="8.3. \u97f3\u6807\u7ec3\u4e60",d={},c=[];function p(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"83-\u97f3\u6807\u7ec3\u4e60",children:"8.3. \u97f3\u6807\u7ec3\u4e60"})}),"\n",(0,s.jsx)(e.p,{children:"\u8fd9\u662f\u4e00\u4e2a Jupyter Notebook\uff0c\u7528\u6765\u5efa\u7acb\u97f3\u6807\u7b26\u53f7\u4e0e\u58f0\u97f3\u4e4b\u95f4\u7684\u5173\u8054\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u6bcf\u6b21\u6267\u884c\uff0c\u968f\u5373\u4ece\u300a\u5251\u6865\u82f1\u8bed\u53d1\u58f0\u8bcd\u5178\u300b\u4e2d\u9009\u53d6\u4e00\u4e2a\u8bcd\u6c47\uff0c\u64ad\u653e\u771f\u4eba\u6717\u8bfb\u8bed\u97f3\uff0c\u800c\u540e\u8981\u6c42\u5bf9\u5143\u97f3\u6216\u8005\u8f85\u97f3\u586b\u7a7a\u2026\u2026"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://1000h.org/jupyter-notebooks/phonetics-fill-in-exercise.ipynb",children:"phonetics-fill-in-exercise.ipynb"})}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"phoneme-exercises.png",src:r(44442).A+"",width:"1724",height:"400"})}),"\n",(0,s.jsx)(e.p,{children:"Jupyter Notebook \u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# %%\n%pip install python-vlc\n\n# %%\nimport requests\nimport json\nimport vlc\nimport re\nimport random\nfrom IPython.display import Audio\n\nimport json\nimport requests\n\ndef load_json_database(source):\n    records = []\n    \n    def parse_json_lines(lines):\n        for line in lines:\n            if line:\n                try:\n                    record = json.loads(line)\n                    records.append(record)\n                except json.JSONDecodeError as e:\n                    print(f\"Error parsing JSON: {e}\")\n\n    try:\n        if source.startswith('http://') or source.startswith('https://'):\n            # Handle as URL\n            response = requests.get(source)\n            response.raise_for_status()  # Raise an error for bad status codes\n            parse_json_lines(response.iter_lines(decode_unicode=True))\n        else:\n            # Handle as file\n            with open(source, 'r', encoding='utf-8') as file:\n                parse_json_lines(file)\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching data from URL: {e}\")\n    except FileNotFoundError as e:\n        print(f\"Error opening file: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n    \n    return records\n\nurl = \"https://raw.githubusercontent.com/zelic91/camdict/main/cam_dict.refined.json\"\njson_database = load_json_database(url)\n# %%\ndef search_in_json_database(database, search_word, region):\n    for record in database:\n        # \u68c0\u67e5 word \u5b57\u6bb5\u662f\u5426\u5339\u914d\n        if record.get('word') == search_word:\n            # \u627e\u5230\u5339\u914d\u9879\u540e\uff0c\u83b7\u53d6\u7f8e\u5f0f\u53d1\u97f3\u4fe1\u606f\n            pos_items = record.get('pos_items', [])\n            for pos_item in pos_items:\n                pronunciations = pos_item.get('pronunciations', [])\n                for pronunciation in pronunciations:\n                    if pronunciation.get('region') == region:\n                        # \u627e\u5230\u7f8e\u5f0f\u53d1\u97f3\uff0c\u8fd4\u56de\u76f8\u5173\u4fe1\u606f\n                        return {\n                            'pronunciation': pronunciation.get('pronunciation'),\n                            'audio': pronunciation.get('audio')\n                        }\n    # \u5982\u679c\u6ca1\u6709\u627e\u5230\u5339\u914d\u7684 word \u5b57\u6bb5\uff0c\u8fd4\u56de 'not exist'\n    return 'not exist'\n\ndef replace_with_underscores(match):\n    return '_' * len(match.group(0))\n\n# %%\n# get a random word from the database\n\nvowel_phonetics = re.compile(r'\u0251\u02d0|\u0251\u02d0r|\u028c||i\u02d0|\u026a|i|\u026ar|\u028a|\u028ar|u\u02d0|\u028ar|e|er|\xe6|\u0259|\u025a|\u025d\u02d0|\u0252|\u0254\u02d0|\u0254\u02d0r|\u0254\u026a|a\u026a|a\u026ar|e\u026a|a\u028a|a\u028ar|o\u028a|')\nconsonant_phonetics = re.compile(r'p|b|t|d|k|\u0261|f|v|\u03b8|\xf0|s|z|\u0283|\u0292|t\u0283|d\u0292|r|h|l|t\u032c|j|w|\u014b|n|m|tr|dr|ts|dz|br|pr|fr|\u0261r|\u03b8r|dr|\u0283r|kr|bl|kl|\u0261l|fl|pl|sl|sp|st|sk|sm|sn|sw|str|spr|skr|spl|sfr|skw|skr|skl|')\n\n# if the word is with certain enddings such as 'es, ed, ing', get another word\nrandom_word = random.choice(json_database)\nwhile random_word['word'].endswith(('ed', 'ing', 'es', 'ts', 'ks', 'ds', 'ps', 'bs', 'gs', 'ls', 'rs', 'ms', 'ns', 'er', 'est')):\n    random_word = random.choice(json_database)\n\n# get pronunciation of the random word with region 'us'\nrandom_word_us = search_in_json_database(json_database, random_word['word'], 'us')\n\n# get the word's phonetics\nrandom_word_entry = random_word['word']\nprint(random_word_entry)\n\nrandom_word_phonetics = random_word_us['pronunciation']\n\n# get the audio url of the word\nrandom_word_us_audio_url = random_word_us['audio']\nprint(random_word_us_audio_url)\n\nblank_vowel_phonetics = re.sub(vowel_phonetics, replace_with_underscores, random_word_phonetics)\nblank_consonant_phonetics = re.sub(consonant_phonetics, replace_with_underscores, random_word_phonetics)\n\n# fill vowels in blanks\nprint(f'Fill vowels in blanks: {blank_vowel_phonetics}')\n\n# fill consonants in blanks\nprint(f'Fill in consonants in blanks: {blank_consonant_phonetics}')\n\n# play the audio\nplayer = vlc.MediaPlayer(random_word_us['audio'])\nplayer.play()\n\n# display the audio\nAudio(url=random_word_us_audio_url)\n"})})]})}function l(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}},44442:(n,e,r)=>{r.d(e,{A:()=>o});const o=r.p+"assets/images/phoneme-exercises-839e2431c486a1322b5d0940a62457c3.png"},28453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>a});var o=r(96540);const s={},t=o.createContext(s);function i(n){const e=o.useContext(t);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),o.createElement(t.Provider,{value:e},n.children)}}}]);